{"version":3,"file":"tls.cjs","sources":["../../../src/mods/tls.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { Alert } from \"mods/binary/alerts/alert.js\"\nimport { ClientHello2 } from \"mods/binary/handshakes/client_hello/handshake2.js\"\nimport { Handshake, HandshakeHeader } from \"mods/binary/handshakes/handshake.js\"\nimport { ServerHello2 } from \"mods/binary/handshakes/server_hello/handshake2.js\"\nimport { RecordHeader } from \"mods/binary/record/record.js\"\nimport { Transport } from \"mods/transports/transport.js\"\n\nexport class Tls {\n\n  constructor(\n    readonly transport: Transport,\n    readonly ciphers: number[]\n  ) {\n    transport.addEventListener(\"message\", async (e) => {\n      const message = e as MessageEvent<Buffer>\n      this.onData(message.data)\n    }, { passive: true })\n  }\n\n  async handshake() {\n    const hello = ClientHello2\n      .default(this.ciphers)\n      .handshake()\n      .record(0x0301)\n      .export()\n    await this.transport.send(hello.buffer)\n  }\n\n  private async onData(data: Buffer) {\n    console.log(\"<-\", data)\n    this.onRecord(new Binary(data))\n  }\n\n  private async onRecord(binary: Binary) {\n    const record = RecordHeader.read(binary)\n\n    if (record.type === Alert.type)\n      return this.onAlert(binary)\n    if (record.type === Handshake.type)\n      return this.onHandshake(binary)\n\n    console.warn(record)\n  }\n\n  private async onAlert(binary: Binary) {\n    const alert = Alert.read(binary)\n\n    console.log(alert)\n  }\n\n  private async onHandshake(binary: Binary) {\n    const handshake = HandshakeHeader.read(binary)\n\n    if (handshake.type === ServerHello2.type)\n      return this.onServerHello(binary, handshake.length)\n\n    console.warn(handshake)\n  }\n\n  private async onServerHello(binary: Binary, length: number) {\n    const hello = ServerHello2.read(binary, length)\n\n    console.log(hello)\n  }\n}"],"names":["__awaiter","ClientHello2","Binary","record","RecordHeader","Alert","Handshake","alert","handshake","HandshakeHeader","ServerHello2"],"mappings":";;;;;;;;;;MAQa,GAAG,CAAA;IAEd,WACW,CAAA,SAAoB,EACpB,OAAiB,EAAA;QADjB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAW;QACpB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAU;QAE1B,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAO,CAAC,KAAIA,eAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;YAChD,MAAM,OAAO,GAAG,CAAyB,CAAA;AACzC,YAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;SAC1B,CAAA,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;KACtB;IAEK,SAAS,GAAA;;YACb,MAAM,KAAK,GAAGC,uBAAY;AACvB,iBAAA,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;AACrB,iBAAA,SAAS,EAAE;iBACX,MAAM,CAAC,MAAM,CAAC;AACd,iBAAA,MAAM,EAAE,CAAA;YACX,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;SACxC,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,MAAM,CAAC,IAAY,EAAA;;AAC/B,YAAA,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACvB,IAAI,CAAC,QAAQ,CAAC,IAAIC,aAAM,CAAC,IAAI,CAAC,CAAC,CAAA;SAChC,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,QAAQ,CAAC,MAAc,EAAA;;YACnC,MAAMC,QAAM,GAAGC,mBAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAExC,YAAA,IAAID,QAAM,CAAC,IAAI,KAAKE,WAAK,CAAC,IAAI;AAC5B,gBAAA,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;AAC7B,YAAA,IAAIF,QAAM,CAAC,IAAI,KAAKG,mBAAS,CAAC,IAAI;AAChC,gBAAA,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;AAEjC,YAAA,OAAO,CAAC,IAAI,CAACH,QAAM,CAAC,CAAA;SACrB,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,OAAO,CAAC,MAAc,EAAA;;YAClC,MAAMI,OAAK,GAAGF,WAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAEhC,YAAA,OAAO,CAAC,GAAG,CAACE,OAAK,CAAC,CAAA;SACnB,CAAA,CAAA;AAAA,KAAA;AAEa,IAAA,WAAW,CAAC,MAAc,EAAA;;YACtC,MAAMC,WAAS,GAAGC,yBAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAE9C,YAAA,IAAID,WAAS,CAAC,IAAI,KAAKE,yBAAY,CAAC,IAAI;gBACtC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAEF,WAAS,CAAC,MAAM,CAAC,CAAA;AAErD,YAAA,OAAO,CAAC,IAAI,CAACA,WAAS,CAAC,CAAA;SACxB,CAAA,CAAA;AAAA,KAAA;IAEa,aAAa,CAAC,MAAc,EAAE,MAAc,EAAA;;YACxD,MAAM,KAAK,GAAGE,yBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;AAE/C,YAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;SACnB,CAAA,CAAA;AAAA,KAAA;AACF;;;;"}