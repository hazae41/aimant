{"version":3,"file":"handshake2.cjs","sources":["../../../../../../src/mods/binary/handshakes/certificate/handshake2.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { Handshake } from \"mods/binary/handshakes/handshake.js\"\nimport { Number24 } from \"mods/binary/number.js\"\nimport { ArrayVector, BufferVector } from \"mods/binary/vector.js\"\n\nexport class Certificate2 {\n  readonly class = Certificate2\n\n  static type = Handshake.types.certificate\n\n  constructor(\n    readonly certificate_list: ArrayVector<Number24, BufferVector<Number24>>\n  ) { }\n\n  static read(binary: Binary, length: number) {\n    const start = binary.offset\n\n    const certificate_list = ArrayVector<Number24, BufferVector<Number24>>(Number24, BufferVector(Number24)).read(binary)\n\n    if (binary.offset - start > length)\n      throw new Error(`Invalid ${this.name} length`)\n\n    return new this(certificate_list)\n  }\n}"],"names":["ArrayVector","Number24","BufferVector","Handshake"],"mappings":";;;;;;MAKa,YAAY,CAAA;AAKvB,IAAA,WAAA,CACW,gBAA+D,EAAA;QAA/D,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA+C;QALjE,IAAK,CAAA,KAAA,GAAG,YAAY,CAAA;KAMxB;AAEL,IAAA,OAAO,IAAI,CAAC,MAAc,EAAE,MAAc,EAAA;AACxC,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAA;AAE3B,QAAA,MAAM,gBAAgB,GAAGA,kBAAW,CAAmCC,eAAQ,EAAEC,mBAAY,CAACD,eAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAErH,QAAA,IAAI,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,MAAM;YAChC,MAAM,IAAI,KAAK,CAAC,CAAA,QAAA,EAAW,IAAI,CAAC,IAAI,CAAS,OAAA,CAAA,CAAC,CAAA;AAEhD,QAAA,OAAO,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAA;KAClC;;AAfM,YAAA,CAAA,IAAI,GAAGE,mBAAS,CAAC,KAAK,CAAC,WAAW;;;;"}