{"version":3,"file":"handshake.cjs","sources":["../../../../../src/mods/binary/handshakes/handshake.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { Record } from \"mods/binary/record/record.js\"\nimport { Writable } from \"mods/binary/writable.js\"\n\nexport interface IHandshake extends Writable {\n  type: number\n}\n\nexport class Handshake {\n  readonly class = Handshake\n\n  static type = Record.types.handshake\n\n  static types = {\n    client_hello: 1,\n    server_hello: 2\n  }\n\n  constructor(\n    readonly handshake: IHandshake\n  ) { }\n\n  get type() {\n    return this.class.type\n  }\n\n  size() {\n    return 1 + 3 + this.handshake.size()\n  }\n\n  write(binary: Binary) {\n    binary.writeUint8(this.handshake.type)\n    binary.writeUint24(this.handshake.size())\n    this.handshake.write(binary)\n  }\n\n  record(version: number) {\n    return Record.from(this, version)\n  }\n}"],"names":["Record"],"mappings":";;;;MAQa,SAAS,CAAA;AAUpB,IAAA,WAAA,CACW,SAAqB,EAAA;QAArB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAY;QAVvB,IAAK,CAAA,KAAA,GAAG,SAAS,CAAA;KAWrB;AAEL,IAAA,IAAI,IAAI,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;KACvB;IAED,IAAI,GAAA;QACF,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;KACrC;AAED,IAAA,KAAK,CAAC,MAAc,EAAA;QAClB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACtC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAA;AACzC,QAAA,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;KAC7B;AAED,IAAA,MAAM,CAAC,OAAe,EAAA;QACpB,OAAOA,aAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;KAClC;;AA3BM,SAAA,CAAA,IAAI,GAAGA,aAAM,CAAC,KAAK,CAAC,SAAS,CAAA;AAE7B,SAAA,CAAA,KAAK,GAAG;AACb,IAAA,YAAY,EAAE,CAAC;AACf,IAAA,YAAY,EAAE,CAAC;CAChB;;;;"}