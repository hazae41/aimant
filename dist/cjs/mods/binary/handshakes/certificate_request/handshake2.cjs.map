{"version":3,"file":"handshake2.cjs","sources":["../../../../../../src/mods/binary/handshakes/certificate_request/handshake2.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { Handshake } from \"mods/binary/handshakes/handshake.js\"\nimport { Number16, Number8 } from \"mods/binary/number.js\"\nimport { SignatureAndHashAlgorithm } from \"mods/binary/signature.js\"\nimport { ArrayVector, BufferVector, Vector } from \"mods/binary/vector.js\"\n\nexport class ClientCertificateType {\n  readonly class = ClientCertificateType\n\n  static types = {\n    rsa_sign: 1,\n    dss_sign: 2,\n    rsa_fixed_dh: 3,\n    dss_fixed_dh: 4,\n    rsa_ephemeral_dh_RESERVED: 5,\n    dss_ephemeral_dh_RESERVED: 6,\n    fortezza_dms_RESERVED: 20\n  }\n\n  constructor(\n    readonly type: number\n  ) { }\n\n  size() {\n    return 1\n  }\n\n  write(binary: Binary) {\n    binary.writeUint8(this.type)\n  }\n\n  static read(binary: Binary) {\n    return new this(binary.readUint8())\n  }\n}\n\nexport class CertificateRequest2 {\n  readonly class = CertificateRequest2\n\n  static type = Handshake.types.certificate_request\n\n  constructor(\n    readonly certificate_types: ArrayVector<Number8, ClientCertificateType>,\n    readonly supported_signature_algorithms: ArrayVector<Number16, SignatureAndHashAlgorithm>,\n    readonly certificate_authorities: Vector<Number16>\n  ) { }\n\n  static read(binary: Binary, length: number) {\n    const start = binary.offset\n\n    const certificate_types = ArrayVector<Number8, ClientCertificateType>(Number8).read(binary, ClientCertificateType)\n    const supported_signature_algorithms = ArrayVector<Number16, SignatureAndHashAlgorithm>(Number16).read(binary, SignatureAndHashAlgorithm)\n    const certificate_authorities = BufferVector<Number16>(Number16).read(binary)\n\n    if (binary.offset - start > length)\n      throw new Error(`Invalid ${this.name} length`)\n\n    return new this(certificate_types, supported_signature_algorithms, certificate_authorities)\n  }\n}"],"names":["ArrayVector","Number8","Number16","SignatureAndHashAlgorithm","BufferVector","Handshake"],"mappings":";;;;;;;MAMa,qBAAqB,CAAA;AAahC,IAAA,WAAA,CACW,IAAY,EAAA;QAAZ,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QAbd,IAAK,CAAA,KAAA,GAAG,qBAAqB,CAAA;KAcjC;IAEL,IAAI,GAAA;AACF,QAAA,OAAO,CAAC,CAAA;KACT;AAED,IAAA,KAAK,CAAC,MAAc,EAAA;AAClB,QAAA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KAC7B;IAED,OAAO,IAAI,CAAC,MAAc,EAAA;QACxB,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAA;KACpC;;AAxBM,qBAAA,CAAA,KAAK,GAAG;AACb,IAAA,QAAQ,EAAE,CAAC;AACX,IAAA,QAAQ,EAAE,CAAC;AACX,IAAA,YAAY,EAAE,CAAC;AACf,IAAA,YAAY,EAAE,CAAC;AACf,IAAA,yBAAyB,EAAE,CAAC;AAC5B,IAAA,yBAAyB,EAAE,CAAC;AAC5B,IAAA,qBAAqB,EAAE,EAAE;CAC1B,CAAA;MAmBU,mBAAmB,CAAA;AAK9B,IAAA,WAAA,CACW,iBAA8D,EAC9D,8BAAgF,EAChF,uBAAyC,EAAA;QAFzC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAA6C;QAC9D,IAA8B,CAAA,8BAAA,GAA9B,8BAA8B,CAAkD;QAChF,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAkB;QAP3C,IAAK,CAAA,KAAA,GAAG,mBAAmB,CAAA;KAQ/B;AAEL,IAAA,OAAO,IAAI,CAAC,MAAc,EAAE,MAAc,EAAA;AACxC,QAAA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAA;AAE3B,QAAA,MAAM,iBAAiB,GAAGA,kBAAW,CAAiCC,cAAO,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAA;AAClH,QAAA,MAAM,8BAA8B,GAAGD,kBAAW,CAAsCE,eAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,EAAEC,mCAAyB,CAAC,CAAA;QACzI,MAAM,uBAAuB,GAAGC,mBAAY,CAAWF,eAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AAE7E,QAAA,IAAI,MAAM,CAAC,MAAM,GAAG,KAAK,GAAG,MAAM;YAChC,MAAM,IAAI,KAAK,CAAC,CAAA,QAAA,EAAW,IAAI,CAAC,IAAI,CAAS,OAAA,CAAA,CAAC,CAAA;QAEhD,OAAO,IAAI,IAAI,CAAC,iBAAiB,EAAE,8BAA8B,EAAE,uBAAuB,CAAC,CAAA;KAC5F;;AAnBM,mBAAA,CAAA,IAAI,GAAGG,mBAAS,CAAC,KAAK,CAAC,mBAAmB;;;;;"}