{"version":3,"file":"handshake2.cjs","sources":["../../../../../../src/mods/binary/handshakes/client_hello/handshake2.ts"],"sourcesContent":["import { Binary } from \"libs/binary.js\"\nimport { Handshake } from \"mods/binary/handshakes/handshake.js\"\nimport { Number16, Number8 } from \"mods/binary/number.js\"\nimport { Random } from \"mods/binary/random.js\"\nimport { ArrayVector, Vector, Vector16, Vector8 } from \"mods/binary/vector.js\"\nimport { CipherSuite } from \"mods/ciphers/cipher.js\"\n\nexport class ClientHello2 {\n  readonly class = ClientHello2\n\n  static type = Handshake.types.client_hello\n\n  constructor(\n    readonly version: number,\n    readonly random: Random,\n    readonly session_id: Vector<Number8>,\n    readonly cipher_suites: Vector<Number16>,\n    readonly compression_methods: Vector<Number8>,\n    readonly extensions?: Vector<Number16>\n  ) { }\n\n  get type() {\n    return this.class.type\n  }\n\n  static default(ciphers: CipherSuite[]) {\n    const version = 0x0303\n    const random = Random.default()\n\n    const session_id = new (ArrayVector<Number8>(Number8))([])\n    const cipher_suites = new (Vector16<Number16>(Number16))(ciphers.map(it => it.id))\n    const compression_methods = new (Vector8<Number8>(Number8))([0])\n\n    return new this(version, random, session_id, cipher_suites, compression_methods)\n  }\n\n  size() {\n    return 0\n      + 2\n      + this.random.size()\n      + this.session_id.size()\n      + this.cipher_suites.size()\n      + this.compression_methods.size()\n      + (this.extensions?.size() ?? 0)\n  }\n\n  write(binary: Binary) {\n    binary.writeUint16(this.version)\n    this.random.write(binary)\n    this.session_id.write(binary)\n    this.cipher_suites.write(binary)\n    this.compression_methods.write(binary)\n    this.extensions?.write(binary)\n  }\n\n  handshake() {\n    return Handshake.from(this)\n  }\n}"],"names":["random","Random","ArrayVector","Number8","Vector16","Number16","Vector8","Handshake"],"mappings":";;;;;;;MAOa,YAAY,CAAA;IAKvB,WACW,CAAA,OAAe,EACf,MAAc,EACd,UAA2B,EAC3B,aAA+B,EAC/B,mBAAoC,EACpC,UAA6B,EAAA;QAL7B,IAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;QACf,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QACd,IAAU,CAAA,UAAA,GAAV,UAAU,CAAiB;QAC3B,IAAa,CAAA,aAAA,GAAb,aAAa,CAAkB;QAC/B,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAiB;QACpC,IAAU,CAAA,UAAA,GAAV,UAAU,CAAmB;QAV/B,IAAK,CAAA,KAAA,GAAG,YAAY,CAAA;KAWxB;AAEL,IAAA,IAAI,IAAI,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;KACvB;IAED,OAAO,OAAO,CAAC,OAAsB,EAAA;QACnC,MAAM,OAAO,GAAG,MAAM,CAAA;AACtB,QAAA,MAAMA,QAAM,GAAGC,aAAM,CAAC,OAAO,EAAE,CAAA;AAE/B,QAAA,MAAM,UAAU,GAAG,KAAKC,kBAAW,CAAUC,cAAO,CAAC,EAAE,EAAE,CAAC,CAAA;QAC1D,MAAM,aAAa,GAAG,KAAKC,eAAQ,CAAWC,eAAQ,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAClF,QAAA,MAAM,mBAAmB,GAAG,KAAKC,cAAO,CAAUH,cAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AAEhE,QAAA,OAAO,IAAI,IAAI,CAAC,OAAO,EAAEH,QAAM,EAAE,UAAU,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAA;KACjF;IAED,IAAI,GAAA;;AACF,QAAA,OAAO,CAAC;cACJ,CAAC;AACD,cAAA,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;AAClB,cAAA,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;AACtB,cAAA,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;AACzB,cAAA,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE;eAC9B,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,CAAA;KACnC;AAED,IAAA,KAAK,CAAC,MAAc,EAAA;;AAClB,QAAA,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAChC,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACzB,QAAA,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AAC7B,QAAA,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AAChC,QAAA,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QACtC,CAAA,EAAA,GAAA,IAAI,CAAC,UAAU,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,CAAC,MAAM,CAAC,CAAA;KAC/B;IAED,SAAS,GAAA;AACP,QAAA,OAAOO,mBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KAC5B;;AA/CM,YAAA,CAAA,IAAI,GAAGA,mBAAS,CAAC,KAAK,CAAC,YAAY;;;;"}