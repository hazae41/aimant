{"version":3,"file":"cipher.cjs","sources":["../../../../src/mods/ciphers/cipher.ts"],"sourcesContent":["export type KeyExchangeAlgorithmName =\n  | ClassicKeyExchangeAlgorithmName\n  | EllipticKeyExchangeAlgorithmName\n\nexport type ClassicKeyExchangeAlgorithmName =\n  | \"dhe_dss\"\n  | \"dhe_rsa\"\n  | \"dh_anon\"\n  | \"rsa\"\n  | \"dh_dss\"\n  | \"dh_rsa\"\n\nexport type EllipticKeyExchangeAlgorithmName =\n  | \"ecdh_ecdsa\"\n  | \"ecdhe_ecdsa\"\n  | \"ecdh_rsa\"\n  | \"ecdhe_rsa\"\n  | \"ecdh_anon\"\n\nexport type EncryptionAlgorithmName =\n  | \"aes_128_cbc\"\n  | \"aes_256_cbc\"\n  | \"3des_ede_cbc\"\n  | \"aes_128_gcm\"\n  | \"aes_256_gcm\"\n\nexport type HashAlgorithmName =\n  | \"sha\"\n  | \"sha256\"\n\nexport class CipherSuite {\n  constructor(\n    readonly id: number,\n    readonly key_exchange: KeyExchangeAlgorithmName,\n    readonly encryption: EncryptionAlgorithmName,\n    readonly hash: HashAlgorithmName\n  ) { }\n\n  get ephemeral() {\n    const list: KeyExchangeAlgorithmName[] = [\n      \"dhe_dss\",\n      \"dhe_rsa\",\n      \"ecdhe_ecdsa\",\n      \"ecdhe_rsa\"\n    ]\n\n    return list.includes(this.key_exchange)\n  }\n\n  get anonymous() {\n    const list: KeyExchangeAlgorithmName[] = [\n      \"dh_anon\",\n      \"ecdh_anon\"\n    ]\n\n    return list.includes(this.key_exchange)\n  }\n}"],"names":[],"mappings":";;MA8Ba,WAAW,CAAA;AACtB,IAAA,WAAA,CACW,EAAU,EACV,YAAsC,EACtC,UAAmC,EACnC,IAAuB,EAAA;QAHvB,IAAE,CAAA,EAAA,GAAF,EAAE,CAAQ;QACV,IAAY,CAAA,YAAA,GAAZ,YAAY,CAA0B;QACtC,IAAU,CAAA,UAAA,GAAV,UAAU,CAAyB;QACnC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAmB;KAC7B;AAEL,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,MAAM,IAAI,GAA+B;YACvC,SAAS;YACT,SAAS;YACT,aAAa;YACb,WAAW;SACZ,CAAA;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;KACxC;AAED,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,MAAM,IAAI,GAA+B;YACvC,SAAS;YACT,WAAW;SACZ,CAAA;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;KACxC;AACF;;;;"}