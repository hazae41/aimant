import { BinaryWriteError } from "@hazae41/binary"
import { Bytes } from "@hazae41/bytes"
import { Cursor } from "@hazae41/cursor"
import { Ok, Result } from "@hazae41/result"

export class PreMasterSecret {

  /**
   * This random value is generated by the client and is used to generate the master secret, as specified in Section 8.1.
   * @param client_version The latest (newest) version supported by the client.  This is used to detect version rollback attacks.
   * @param random 46 securely-generated random bytes.
   */
  constructor(
    readonly client_version: number,
    readonly random: Bytes<46>
  ) { }

  trySize(): Result<number, never> {
    return new Ok(2 + this.random.length)
  }

  tryWrite(cursor: Cursor): Result<void, BinaryWriteError> {
    return Result.unthrowSync(t => {
      cursor.tryWriteUint16(this.client_version).throw(t)
      cursor.tryWrite(this.random).throw(t)

      return Ok.void()
    })
  }

}